----- Eclipse (Kepler) -----

1) Configure facets (You need this when deployed on GlassFish from Eclipse)
 * Right click on the "project name" (Angular) in Navigator / Project Explorer
 * Select 'properties'
 * Open 'Project Facets'
 * Select the following facets
  > Dynamic Web Module | 3.0 (or 3.1) > Further configuration >
                                        - Context Root: Angular
                                        - Content Directory: src/main/webapp
                                        - Leave 'generate web.xml' unchecked
  > NOTE: This will enable you the project property 'Deployment assembly' and makes it
    available to deploy the project onto container
  > Java               | 1.7
  > JavaScript         | 1.0
  
  
----- Jetty support -----

  Jetty is a light weight (embedded) web-server that can be used to run this Angular project as stand alone.
  It can be used to run simply the Angular part without the need of setting up GlassFish & Java part.
  
  The idea is to provide a "fast start" for UI development when there is not yet any backend to provide data or even
  a container configured to host the application.
  
  You will not have the application correctly functional when using Jetty, as it will not have the backend providing
  the REST services it relies on, but you can enable the 'demoData' to have something rendered on UI and to play just
  with the AngularJS.
  
  To enable the demo data, you will need to open the files
  * /src/main/webapp/app/js/controllers/
   > DetailsControllers.js
   > MainControllers.js
  * Both files do have the following line somewhere in the beginning of the file
   > $scope.useDemoData = false;
    - Change this to
   > $scope.useDemoData = true;
  
  The 'demoData' mode will make the model use some demo data instead of fetching it from the REST.
  
  The Jetty is configured to scan the project files for changes every 5th second. E.g. If you make a change in the
  JavaScript files (and save it), the change will be reflected to the running service within 5 seconds.
  You can change this and other configuration settings in the pom.xml at 'jetty-maven-plugin'.
  
  You can also provide a separate configuration file for Jetty:
  * src/main/webapp/WEB-INF/jetty-web.xml
  
  To run the Jetty server, you can do this from command line or in Eclipse.
  Command line:
   * cd to project root, e.g.
    > cd ~/ajeer/Angular
   * Execute Maven command to use the jetty plugin
    > mvn jetty:run
  Eclipse:
   * Right click on the project name
   * Select: 'Run as' > 'Maven build...'
   * Write to 'goals': 'jetty:run'
   * Give a descriptive name for the build
   * Click 'Run'
   * On subsequent runs/starts, you can select: 'Run as' > 'Maven build' > (the name you gave for the build)
  
  The settings provided by default will publish the Angular project at
  'http://localhost:9090/Angular'


----- Project structure -----

To have "java like" project structure and to avoid having too large javascript & html file clusters, the web content is
structured as follows:
 * /src/main/java/ (Nothing as you probably don't want to have any java with this project)
 * /src/main/resources/META-INF/manifest.mf (Not needed actually)
 * /src/main/WEB-INF/web.xml (This is needed for the container to tell where to start when the app is accessed with
   browser)
  > e.g. http://localhost:8080/Angular => localhost:8080/Angular/app/phonenbook.html
                                       => http://localhost:8080/Angular/#/ajeer
 * /src/main/js/         | If you want some javascript that is not involved with Angular, put it here
 * /src/main/webapp/app/ | All the stuff you want to involve the Angular with
  > css                  | The style sheets
  > img                  | Images used
  > lib                  | Here will be all the libraries needed by Angular itself to function
  > views                | The (sub) views used by Angular to render the content on page the app.js directs to
   - templates             | The html-templates used by the directives
  > js                   | The actual Angular stuff
   - controllers           | The scripts per (sub)page, handling actions done in them
   - directives            | If you want to add custom functionality that affects the page rendering, put the
                             instructions here
   - services              | Functionality common to different controllers can be put here
 * /src/main/webapp/app/app.js          | This file will function as the navigation controller. It will parse the url
                                          and select what to render based on the url parts it finds
 * /src/main/webapp/app/phonenbook.html | This will act as the starting point for the whole application.
                                          The file will include all the scripts needed to load Angular and will provide
                                          the basic layout for the whole SPA (Single Page Application)
 